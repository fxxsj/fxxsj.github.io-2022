<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo博客多端同步问题</title>
      <link href="/2022/07/28/my-first-blog/"/>
      <url>/2022/07/28/my-first-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="博客源文件同步"><a href="#博客源文件同步" class="headerlink" title="博客源文件同步"></a>博客源文件同步</h2><p>在博客根目录执行</p><pre><code>git initgit remote add origin git@github.com:fxxsj/fxxsj.github.io.git  # 添加远程仓库 注意这里要添加你自己的仓库 fxxsj 换成你自己的用户名git checkout -b hexo            # 新建hexo分支并切换到hexo分支git add .              # 所有变化提交到暂存区git commit -m &quot;解决同步问题&quot;  # 提交文件git push origin hexo   # 推送hexo分支</code></pre><p>这就成功了，github上已经有博客的源文件了。</p><p>推荐把hexo设置为默认分支。</p><h2 id="git-submodule-实现第三方主题同步"><a href="#git-submodule-实现第三方主题同步" class="headerlink" title="git submodule 实现第三方主题同步"></a>git submodule 实现第三方主题同步</h2><p>因为之前是直接把第三方主题克隆到博客目录，有什么改动是无法推送到作者Git仓库的，这个时候需要把第三方主题的项目Fork到自己仓库，自己账号下生成一个同名的仓库，并对应一个url，我们应该git clone自己账号下仓库的url。</p><p>Fork第三方主题</p><p>执行如下操作。</p><pre><code>git submodule add git@github.com:fxxsj/hexo-theme-argon.git themes/argon</code></pre><p>把自己仓库下面第三方主题添加到Git子模块。</p><p><code>注 : themes/argon 这里的目录是因为我用的argon主题才会写themes/argon 如果你用的不是argon,请把argon替换成你的第三方主题文件夹名字。</code></p><p>博客的根目录会多一个.gitmodules文件,这是一个配置文件，保存了项目 URL 和你拉取到的本地子目录。<br>.gitmodules文件</p><p>这就添加成功了，然后执行如下操作。</p><pre><code>git add .              # 所有变化提交到暂存区git commit -m &quot;添加第三方主题Git子模块&quot;  # 提交文件git push origin hexo   # 推送hexo分支</code></pre><h2 id="更换电脑同步博客和第三方主题"><a href="#更换电脑同步博客和第三方主题" class="headerlink" title="更换电脑同步博客和第三方主题"></a>更换电脑同步博客和第三方主题</h2><h3 id="同步博客"><a href="#同步博客" class="headerlink" title="同步博客"></a>同步博客</h3><p>电脑上一定要先node和git，执行如下操作。</p><pre><code>npm install hexo-cli -g  # 先安装hexo的脚手架git clone git@github.com:fxxsj/fxxsj.github.io.git  # 下载项目，因为hexo 是默认分支，所以这里直接会下载hexo分支npm i # 安装依赖hexo s # 启动服务器</code></pre><p>剩下的就自行操作了。博客已经完成了同步。</p><p>注：每次写完文章部署网站后，记得再执行如下操作。</p><pre><code>git add .             # 所有变化提交到暂存区git commit -m &quot;新增xxx文章&quot;      # 提交文件git push origin hexo           # 推送hexo分支</code></pre><h3 id="同步第三方主题"><a href="#同步第三方主题" class="headerlink" title="同步第三方主题"></a>同步第三方主题</h3><p>在博客根目录执行如下操作。</p><pre><code>git submodule init    # 初始化本地配置文件git submodule update    # 拉取子模块</code></pre><p>如果第三方主题有修改的，修改完成后在第三方主题目录执行。</p><pre><code>git add .             # 所有变化提交到暂存区git commit -m &quot;修改主题xxxx&quot;      # 提交文件git push origin master       # 推送master分支</code></pre><p>这样就会把修改的主题推送到自己的仓库。</p><p>修改的主题推送到自己的仓库</p><p>这样就实现多端同步了。</p><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><blockquote><p>本文转载自<a href="https://segmentfault.com/a/1190000019459014">lanpangzhi</a>。</p><p>感谢原作者，以及开源世界。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/27/hello-world/"/>
      <url>/2022/07/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用EH Forwarder Bot实现Telegram同时收发多个微信/QQ消息</title>
      <link href="/2019/07/05/%E4%BD%BF%E7%94%A8EH-Forwarder-Bot%E5%AE%9E%E7%8E%B0Telegram%E5%90%8C%E6%97%B6%E6%94%B6%E5%8F%91%E5%A4%9A%E4%B8%AA%E5%BE%AE%E4%BF%A1-QQ%E6%B6%88%E6%81%AF/"/>
      <url>/2019/07/05/%E4%BD%BF%E7%94%A8EH-Forwarder-Bot%E5%AE%9E%E7%8E%B0Telegram%E5%90%8C%E6%97%B6%E6%94%B6%E5%8F%91%E5%A4%9A%E4%B8%AA%E5%BE%AE%E4%BF%A1-QQ%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p><code>EH Forwarder Bot</code>是一个可扩展的聊天隧道框架，允许用户一次发送和接收来自多个<code>IM</code>平台的消息，并最终远程管理他们的帐户，目前可以实现的<code>Telegram</code>收发<code>QQ</code>、微信、<code>Facebook Messenger</code>等消息，你也可以同时一起收发<code>N</code>个微信、<code>N</code>个<code>QQ</code>等，这里就说下<code>Telegram</code>收发微信&#x2F;<code>QQ</code>消息的手动安装及<code>Docker</code>安装。</p><h3 id="收发微信"><a href="#收发微信" class="headerlink" title="收发微信"></a>收发微信</h3><p><strong>项目地址：</strong><a href="https://github.com/blueset/ehForwarderBot">https://github.com/blueset/ehForwarderBot</a></p><p>所使用的模块地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#Telegram模块</span><br><span class="line">https://github.com/blueset/efb-telegram-master</span><br><span class="line">#微信模块</span><br><span class="line">https://github.com/blueset/efb-wechat-slave</span><br></pre></td></tr></table></figure><p>其他模块地址→<a href="https://github.com/blueset/ehForwarderBot/wiki/Channels-Repository">传送门</a>，包括<code>Facebook Messenger</code>等模块，有兴趣的可以看下。</p><p><strong>环境要求：</strong><code>Python 3.6+</code>、<code>EH Forwarder Bot 2.0+</code>、<code>ffmpeg</code>、<code>libmagic</code>、<code>libwebp</code></p><p>手动教程适用于<code>Debian</code>、<code>CentOS</code>、<code>Ubuntu</code>，如果你想用<code>Ubuntu</code>的话，最好使用<code>18.04+</code>版本。</p><h4 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#CentOS系统</span><br><span class="line">yum install file-devel libwebp-tools git screen -y</span><br><span class="line"></span><br><span class="line">#Debian/Ubuntu系统</span><br><span class="line">apt install libwebp-dev libmagic-dev git screen -y</span><br></pre></td></tr></table></figure><h4 id="2、安装Python3-6"><a href="#2、安装Python3-6" class="headerlink" title="2、安装Python3.6"></a>2、安装Python3.6</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#CentOS系统</span><br><span class="line">wget https://www.moerats.com/usr/shell/Python3/CentOS_Python3.6.sh &amp;&amp; sh CentOS_Python3.6.sh</span><br><span class="line">#Debian系统</span><br><span class="line">wget https://www.moerats.com/usr/shell/Python3/Debian_Python3.6.sh &amp;&amp; sh Debian_Python3.6.sh</span><br><span class="line">#Ubuntu系统</span><br><span class="line">apt update</span><br><span class="line">apt install python3-pip python3-setuptools python3-dev -y</span><br></pre></td></tr></table></figure><h4 id="3、安装ffmpeg"><a href="#3、安装ffmpeg" class="headerlink" title="3、安装ffmpeg"></a>3、安装ffmpeg</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#下载ffmpeg二进制</span><br><span class="line">wget https://www.moerats.com/usr/down/ffmpeg/ffmpeg-git-$(getconf LONG_BIT)bit-static.tar.xz</span><br><span class="line">#解压文件</span><br><span class="line">tar xvf ffmpeg-git-*-static.tar.xz</span><br><span class="line">#移动ffmpeg可执行文件</span><br><span class="line">mv ffmpeg-git-*/ffmpeg  ffmpeg-git-*/ffprobe /usr/bin/</span><br><span class="line">#删除文件</span><br><span class="line">rm -rf ffmpeg-git-*</span><br></pre></td></tr></table></figure><h4 id="4、安装框架"><a href="#4、安装框架" class="headerlink" title="4、安装框架"></a>4、安装框架</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#安装稳定版</span><br><span class="line">pip3 install ehforwarderbot</span><br><span class="line"></span><br><span class="line">#安装开发版，建议安装开发版，bug修复快些，功能也新</span><br><span class="line">pip3 install git+https://github.com/blueset/ehforwarderbot.git</span><br></pre></td></tr></table></figure><h4 id="5、安装TG和微信模块"><a href="#5、安装TG和微信模块" class="headerlink" title="5、安装TG和微信模块"></a>5、安装TG和微信模块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install efb-telegram-master efb-wechat-slave</span><br></pre></td></tr></table></figure><h4 id="6、启用模块"><a href="#6、启用模块" class="headerlink" title="6、启用模块"></a>6、启用模块</h4><p>先新建配置文件夹和配置文件<code>config.yaml</code>，使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#default为配置文件默认的文件夹，你也可以命名为其它的，不会玩的就默认</span><br><span class="line">mkdir -p ~/.ehforwarderbot/profiles/default</span><br><span class="line">nano ~/.ehforwarderbot/profiles/default/config.yaml</span><br></pre></td></tr></table></figure><p>参考代码为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#请根据实际情况修改</span><br><span class="line">master_channel: foo.demo_master</span><br><span class="line">slave_channels:</span><br><span class="line">- foo.demo_slave</span><br><span class="line">- bar.dummy</span><br><span class="line">middlewares:</span><br><span class="line">- foo.null</span><br></pre></td></tr></table></figure><p>以上对应的均为模块名称，模块参考→<a href="https://github.com/blueset/ehForwarderBot/wiki/Channels-Repository">传送门</a>，比如这里博主只用了<code>Telegram</code>和<code>WeChat</code>模块，所以大致配置为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master_channel: blueset.telegram</span><br><span class="line">slave_channels:</span><br><span class="line">- blueset.wechat</span><br></pre></td></tr></table></figure><p>然后使用<code>Ctrl+x</code>、<code>y</code>保存退出。</p><p>这只是登录一个微信号，如果你要同时登录多个微信号，那么配置文件就需要改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#比如我要同时登录并收发3个微信号</span><br><span class="line">master_channel: blueset.telegram</span><br><span class="line">slave_channels:</span><br><span class="line">- blueset.wechat</span><br><span class="line">- blueset.wechat#moe123</span><br><span class="line">- blueset.wechat#rats321</span><br></pre></td></tr></table></figure><p>只需要在后面使用<code>#</code>指定一个<code>ID</code>号，该<code>ID</code>号只能有字母，数字和下划线，即正则表达式<code>[a-zA-Z0-9_]+</code>，想登录几个账户就加几个。如果你使用<code>QQ</code>、<code>Facebook Messenger</code>模块的话，设置方法也一样。</p><h4 id="7、建立TG配置文件"><a href="#7、建立TG配置文件" class="headerlink" title="7、建立TG配置文件"></a>7、建立TG配置文件</h4><p>建立配置文件前需要先获取<code>Telegram</code>的<code>Token</code>和<code>Userid</code>，获取方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#Telegram的Token获取</span><br><span class="line">1、在Telegram关注@BotFather</span><br><span class="line">2、再到对话框依次输入：/start=&gt;/newbot，然后会要你给机器人命名(如：MoeratsBot)，命名完成会给你一个Token。</span><br><span class="line"></span><br><span class="line">#Telegram群Userid获取</span><br><span class="line">1、先和你的机器人聊天，随便发一句话。</span><br><span class="line">2、在浏览器输入https://api.telegram.org/botxx:xx/getUpdates(其中xx:xx为Token)，然后chat后面的id即为你的userid。</span><br></pre></td></tr></table></figure><p>再新建一个<code>Telegram</code>模块配置文件夹和配置文件<code>config.yaml</code>，使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#同样的也建在default文件夹，如果你上面更改了default文件夹，那这里也要更改</span><br><span class="line">mkdir ~/.ehforwarderbot/profiles/default/blueset.telegram</span><br><span class="line">nano ~/.ehforwarderbot/profiles/default/blueset.telegram/config.yaml</span><br></pre></td></tr></table></figure><p>填入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">token: &quot;12345:moerats&quot; </span><br><span class="line">admins:</span><br><span class="line">- 765432 </span><br></pre></td></tr></table></figure><p>然后使用<code>Ctrl+x</code>、<code>y</code>保存退出。上面所对应的参数分别为<code>Token</code>和<code>Userid</code>。关于<code>Telegram</code>模块的更多玩法可以参考→<a href="https://github.com/blueset/efb-telegram-master">传送门</a>。</p><h4 id="8、启动"><a href="#8、启动" class="headerlink" title="8、启动"></a>8、启动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#该命令会默认从default文件夹读取信息，如果你之前建的是moerats文件夹，那命令应该为ehforwarderbot -p moerats</span><br><span class="line">ehforwarderbot</span><br></pre></td></tr></table></figure><p>这时候会给一个微信二维码或者二维码链接你，放到浏览器打开扫描登录即可，如果你设置了同时登录多个账户，那设置几个就需要登录几个。</p><p>然后使用<code>Ctrl+C</code>断开运行，再使用命令后台运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -dmS EHF ehforwarderbot</span><br></pre></td></tr></table></figure><p>最后你的微信消息会通过机器人发送给你，你也可以通过机器人将消息发送给指定好友。</p><h3 id="收发QQ消息"><a href="#收发QQ消息" class="headerlink" title="收发QQ消息"></a>收发QQ消息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提示：这里随便提了下，了解下就行了，建议使用下面Docker方式安装。</span><br></pre></td></tr></table></figure><p>所使用的模块地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#Telegram模块</span><br><span class="line">https://github.com/blueset/efb-telegram-master</span><br><span class="line">#QQ模块</span><br><span class="line">https://github.com/milkice233/efb-qq-slave</span><br></pre></td></tr></table></figure><p>由于方法写的很大概，所以需要你把收发微信的方法看懂，这里<code>EH Forwarder Bot</code>只支持<code>酷Q</code>客户端，一般采用<code>Docker</code>的方法在<code>Linux</code>上安装酷<code>Q</code>，方法很久以前就说过了，参考→<a href="https://www.moerats.com/archives/802/">传送门</a>，不过启动命令变了下，也就是安装<code>wine-coolq</code>的命令。</p><h4 id="安装TG和QQ模块："><a href="#安装TG和QQ模块：" class="headerlink" title="安装TG和QQ模块："></a>安装<code>TG</code>和<code>QQ</code>模块：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install efb-telegram-master efb-qq-slave</span><br></pre></td></tr></table></figure><h4 id="安装wine-coolq："><a href="#安装wine-coolq：" class="headerlink" title="安装wine-coolq："></a>安装<code>wine-coolq</code>：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mkdir coolq  #包含CoolQ程序文件</span><br><span class="line">docker run -ti --rm --name cqhttp-test --net=&quot;host&quot; \</span><br><span class="line">     -v $(pwd)/coolq:/home/user/coolq     `#mount coolq folder` \</span><br><span class="line">     -p 9000:9000                         `#网页noVNC端口` \</span><br><span class="line">     -p 5700:5700                         `#酷Q对外提供的API接口的端口` \</span><br><span class="line">     -e VNC_PASSWD=MAX8char               `#请修改VNC密码！！！！` \</span><br><span class="line">     -e COOLQ_PORT=5700                   `#酷Q对外提供的API接口的端口` \</span><br><span class="line">     -e COOLQ_ACCOUNT=123456              `#在此输入要登录的QQ号，虽然可选但是建议填入` \</span><br><span class="line">     -e CQHTTP_POST_URL=http://127.0.0.1:8000   `#efb-qq-slave监听的端口/地址用于接受传入的消息` \</span><br><span class="line">     -e CQHTTP_SERVE_DATA_FILES=yes       `#允许以HTTP方式访问酷Q数据文件` \</span><br><span class="line">     -e CQHTTP_ACCESS_TOKEN=ac0f790e1fb74ebcaf45da77a6f9de47  `#Access Token` \</span><br><span class="line">     -e CQHTTP_POST_MESSAGE_FORMAT=array  `# 回传消息时使用数组(必选)` \</span><br><span class="line">     richardchien/cqhttp:latest</span><br></pre></td></tr></table></figure><p>然后使用<code>ip:9000</code>访问<code>noVNC</code>登录<code>酷Q</code>即可。</p><h4 id="新建QQ模块配置文件："><a href="#新建QQ模块配置文件：" class="headerlink" title="新建QQ模块配置文件："></a>新建<code>QQ</code>模块配置文件：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.ehforwarderbot/profiles/default/milkice.qq</span><br><span class="line">nano ~/.ehforwarderbot/profiles/default/milkice.qq/config.yaml</span><br></pre></td></tr></table></figure><p>填入的代码大致如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Client: CoolQ                         #指定要使用的QQ客户端（此处为CoolQ）</span><br><span class="line">CoolQ:</span><br><span class="line">    type: HTTP                        #指定efb-qq-slave与酷Q通信的方式 现阶段仅支持HTTP</span><br><span class="line">    access_token: ac0f790e1fb74ebcaf45da77a6f9de47</span><br><span class="line">    api_root: http://127.0.0.1:5700/  # 酷Q API接口地址/端口</span><br><span class="line">    host: 127.0.0.1                   # efb-qq-slave所监听的地址用于接收消息</span><br><span class="line">    port: 8000                        # 同上</span><br><span class="line">    is_pro: false                      # 若为酷Q Pro则为true，反之为false</span><br><span class="line">    air_option:                       # 包含于air_option的配置选项仅当is_pro为false时才有效</span><br><span class="line">        upload_to_smms: true          # 将来自EFB主端(通常是Telegram) 的图片上传到sm.ms服务器并以链接的形式发送到QQ端</span><br></pre></td></tr></table></figure><p>最后使用<code>ehforwarderbot</code>命令启动即可。</p><h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><p>这里选择<code>2</code>个最新的<code>Docker</code>镜像，也是官方推荐的，项目地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#Telegram收发QQ消息</span><br><span class="line">https://github.com/Earth-Online/efb-qq-coolq-docker</span><br><span class="line">#Telegram收发微信消息</span><br><span class="line">https://www.github.com/Mikubill/efb-wechat-docker</span><br></pre></td></tr></table></figure><h4 id="1、安装Docker"><a href="#1、安装Docker" class="headerlink" title="1、安装Docker"></a>1、安装Docker</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#CentOS 6</span><br><span class="line">rpm -iUvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">yum update -y</span><br><span class="line">yum -y install docker-io</span><br><span class="line">service docker start</span><br><span class="line">chkconfig docker on</span><br><span class="line"></span><br><span class="line">#CentOS 7、Debian、Ubuntu</span><br><span class="line">curl -sSL https://get.docker.com/ | sh</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><h4 id="2、Telegram收发QQ消息"><a href="#2、Telegram收发QQ消息" class="headerlink" title="2、Telegram收发QQ消息"></a>2、Telegram收发QQ消息</h4><p>安装<code>docker-compose</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">#验证是否安装成功</span><br><span class="line">docker-compose --version</span><br><span class="line">#返回以下信息即安装成功</span><br><span class="line">docker-compose version 1.23.2, build 1110ad01</span><br></pre></td></tr></table></figure><p>拉取<code>Docker</code>源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Earth-Online/efb-qq-coolq-docker.git</span><br><span class="line">cd efb-qq-coolq-docker</span><br><span class="line">#编辑config.yaml配置文件</span><br><span class="line">nano ehforward_config/profiles/default/blueset.telegram/config.yaml</span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#token和userid参数获取方法查看上面的手动安装教程</span><br><span class="line">token: &quot;你的TG机器人Token&quot;</span><br><span class="line">admins:</span><br><span class="line">- 你的Userid</span><br></pre></td></tr></table></figure><p>然后再编辑<code>docker-compose.yml</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- VNC_PASSWD=你的密码</span><br><span class="line">- COOLQ_ACCOUNT=你的qq账号</span><br></pre></td></tr></table></figure><p>后台启动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#第一次启动会构建镜像，所以会慢点</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>然后打开<code>ip:9801</code>登陆<code>novnc</code>后完成<code>coolq</code>登陆操作。如果该地址打不开，请检查下防火墙。</p><h4 id="3、Telegram收发微信消息"><a href="#3、Telegram收发微信消息" class="headerlink" title="3、Telegram收发微信消息"></a>3、Telegram收发微信消息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#拉取源码</span><br><span class="line">git clone https://github.com/mikubill/efb-wechat-docker.git</span><br><span class="line">#构建镜像</span><br><span class="line">cd efb-wechat-docker &amp;&amp; docker build -t mikubill/efbwechat .</span><br><span class="line">#启动镜像，TOKEN为TG机器人Token、ADMIN为你的Userid，获取方法查看上面的手动安装教程</span><br><span class="line">docker run -d -t --name &quot;efbwechat&quot; -e TOKEN=xxxx -e ADMIN=xxxx mikubill/efbwechat</span><br></pre></td></tr></table></figure><p>最后获取微信登录验证码，使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f efbwechat </span><br></pre></td></tr></table></figure><p>扫描登录即可。</p><p>最后这里都没有给微信添加额外的配置文件，直接使用默认的微信配置，如果想扩展微信功能的可以参考→<a href="https://github.com/blueset/efb-wechat-slave#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BE%8B">传送门</a>，不过由于模块使用的微信网页版，所以支持的功能是有限的，比如：没有朋友圈、不能发语音、位置等等，一般来说也够用了，至于<code>QQ</code>的话，功能肯定受<code>酷Q</code>限制，暂时不能处理好友请求处理，加群请求处理，语音发送&#x2F;接收等，对于<code>Facebook Messenger</code>模块的话，有需求的可以自己试试安装配置。</p><h3 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h3><blockquote><p>本文转载自<a href="https://www.moerats.com/archives/931/">Rat’s Blog</a>。</p><p>感谢原作者，以及开源世界。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/2019/06/08/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2019/06/08/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>此文件用来测试和展示书写README的各种markdown语法。GitHub的markdown语法在标准的markdown语法基础上做了扩充，称之为<code>GitHub Flavored Markdown</code>。简称<code>GFM</code>，GFM在GitHub上有广泛应用，除了README文件外，issues和wiki均支持markdown语法。</p><hr><table><thead><tr><th>Author</th><th>果冻虾仁</th></tr></thead><tbody><tr><td>E-mail</td><td><a href="mailto:&#74;&#x65;&#108;&#x6c;&#121;&#46;&#x4b;&#x2e;&#87;&#97;&#110;&#x67;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;">&#74;&#x65;&#108;&#x6c;&#121;&#46;&#x4b;&#x2e;&#87;&#97;&#110;&#x67;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;</a></td></tr></tbody></table><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E6%A8%AA%E7%BA%BF">横线</a></li><li><a href="#%E6%A0%87%E9%A2%98">标题</a></li><li><a href="#%E6%96%87%E6%9C%AC">文本</a><ul><li>普通文本</li><li>单行文本</li><li>多行文本</li><li>文字高亮</li><li>换行</li><li>斜体</li><li>粗体</li><li>删除线</li></ul></li><li><a href="#%E5%9B%BE%E7%89%87">图片</a><ul><li>来源于网络的图片</li><li>GitHub仓库中的图片</li></ul></li><li><a href="#%E9%93%BE%E6%8E%A5">链接</a> <ul><li>文字超链接<ul><li>链接外部URL</li><li>链接本仓库里的URL</li></ul></li><li>锚点</li><li><a href="#%E5%9B%BE%E7%89%87%E9%93%BE%E6%8E%A5">图片链接</a></li></ul></li><li><a href="#%E5%88%97%E8%A1%A8">列表</a><ul><li>无序列表</li><li>有序列表</li><li>复选框列表</li></ul></li><li><a href="#%E5%9D%97%E5%BC%95%E7%94%A8">块引用</a></li><li><a href="#%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE">代码高亮</a></li><li><a href="#%E8%A1%A8%E6%A0%BC">表格</a> </li><li><a href="#%E8%A1%A8%E6%83%85">表情</a></li><li><a href="#diff%E8%AF%AD%E6%B3%95">diff语法</a></li></ul><h2 id="横线"><a href="#横线" class="headerlink" title="横线"></a>横线</h2><hr><p>***、—、___可以显示横线效果</p><hr><hr><hr><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><hr><pre><code>    # 一级标题      ## 二级标题      ### 三级标题      #### 四级标题      ##### 五级标题      ###### 六级标题  </code></pre><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><hr><h3 id="普通文本"><a href="#普通文本" class="headerlink" title="普通文本"></a>普通文本</h3><p>这是一段普通的文本</p><h3 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h3><pre><code>Hello,大家好，我是果冻虾仁。</code></pre><p>在一行开头加入1个Tab或者4个空格。</p><h3 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h3><h4 id="语法1"><a href="#语法1" class="headerlink" title="语法1"></a>语法1</h4><p>在连续几行的文本开头加入1个Tab或者4个空格。</p><pre><code>欢迎到访很高兴见到您祝您，早上好，中午好，下午好，晚安</code></pre><h4 id="语法2"><a href="#语法2" class="headerlink" title="语法2"></a>语法2</h4><p>使用一对各三个的反引号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">欢迎到访</span><br><span class="line">我是C++码农</span><br><span class="line">你可以在知乎、CSDN、简书搜索【果冻虾仁】找到我</span><br></pre></td></tr></table></figure><p>该语法也可以实现代码高亮，见<a href="#%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE">代码高亮</a></p><h3 id="文字高亮"><a href="#文字高亮" class="headerlink" title="文字高亮"></a>文字高亮</h3><p>文字高亮功能能使行内部分文字高亮，使用一对反引号。<br>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`linux` `网络编程` `socket` `epoll` </span><br></pre></td></tr></table></figure><p>效果：<code>linux</code> <code>网络编程</code> <code>socket</code> <code>epoll</code></p><p>也适合做一篇文章的tag</p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p>直接回车不能换行，<br>可以在上一行文本后面补两个空格，<br>这样下一行的文本就换行了。</p><p>或者就是在两行文本直接加一个空行。</p><p>也能实现换行效果，不过这个行间距有点大。</p><h3 id="斜体、粗体、删除线"><a href="#斜体、粗体、删除线" class="headerlink" title="斜体、粗体、删除线"></a>斜体、粗体、删除线</h3><table><thead><tr><th>语法</th><th>效果</th></tr></thead><tbody><tr><td><code>*斜体1*</code></td><td><em>斜体1</em></td></tr><tr><td><code>_斜体2_</code></td><td><em>斜体2</em></td></tr><tr><td><code>**粗体1**</code></td><td><strong>粗体1</strong></td></tr><tr><td><code>__粗体2__</code></td><td><strong>粗体2</strong></td></tr><tr><td><code>这是一个 ~~删除线~~</code></td><td>这是一个 <del>删除线</del></td></tr><tr><td><code>***斜粗体1***</code></td><td><em><strong>斜粗体1</strong></em></td></tr><tr><td><code>___斜粗体2___</code></td><td><em><strong>斜粗体2</strong></em></td></tr><tr><td><code>***~~斜粗体删除线1~~***</code></td><td><em><strong><del>斜粗体删除线1</del></strong></em></td></tr><tr><td><code>~~***斜粗体删除线2***~~</code></td><td><del><em><strong>斜粗体删除线2</strong></em></del></td></tr></tbody></table><pre><code>斜体、粗体、删除线可混合使用</code></pre><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><hr><p>基本格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![alt](URL title)</span><br></pre></td></tr></table></figure><p>alt和title即对应HTML中的alt和title属性（都可省略）：</p><ul><li>alt表示图片显示失败时的替换文本</li><li>title表示鼠标悬停在图片时的显示文本（注意这里要加引号）</li></ul><p>URL即图片的url地址，如果引用本仓库中的图片，直接使用<strong>相对路径</strong>就可了，如果引用其他github仓库中的图片要注意格式，即：<code>仓库地址/raw/分支名/图片路径</code>，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif</span><br></pre></td></tr></table></figure><table><thead><tr><th>#</th><th>语法</th><th>效果</th></tr></thead><tbody><tr><td>1</td><td><code>![baidu](http://www.baidu.com/img/bdlogo.gif &quot;百度logo&quot;)</code></td><td><img src="http://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度logo"></td></tr><tr><td>2</td><td><code>![][foryou]</code></td><td><img src="https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif"></td></tr></tbody></table><p>注意例2的写法使用了<strong>URL标识符</strong>的形式，在<a href="#%E9%93%BE%E6%8E%A5">链接</a>一节有介绍。</p><blockquote><p>在文末有foryou的定义：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[foryou]:https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><hr><h3 id="链接外部URL"><a href="#链接外部URL" class="headerlink" title="链接外部URL"></a>链接外部URL</h3><table><thead><tr><th>#</th><th>语法</th><th>效果</th></tr></thead><tbody><tr><td>1</td><td><code>[我的博客](http://blog.csdn.net/guodongxiaren &quot;悬停显示&quot;)</code></td><td><a href="http://blog.csdn.net/guodongxiaren" title="悬停显示">我的博客</a></td></tr><tr><td>2</td><td><code>[我的知乎][zhihu] </code></td><td><a href="https://www.zhihu.com/people/jellywong" title="我的知乎，欢迎关注">我的知乎</a></td></tr></tbody></table><p>语法2由两部分组成：</p><ul><li>第一部分使用两个中括号，[ ]里的标识符（本例中zhihu），可以是数字，字母等的组合，标识符上下对应就行了（<strong>姑且称之为URL标识符</strong>）</li><li>第二部分标记实际URL。</li></ul><blockquote><p>使用URL标识符能达到复用的目的，一般把全文所有的URL标识符统一放在文章末尾，这样看起来比较干净。</p><blockquote><p>URL标识符是我起的名字，不知道是否准确。囧。。</p></blockquote></blockquote><h3 id="链接本仓库里的URL"><a href="#链接本仓库里的URL" class="headerlink" title="链接本仓库里的URL"></a>链接本仓库里的URL</h3><table><thead><tr><th>语法</th><th>效果</th></tr></thead><tbody><tr><td><code>[我的简介](/example/profile.md)</code></td><td><a href="/example/profile.md">我的简介</a></td></tr><tr><td><code>[Book](./Book)</code></td><td><a href="/Book">Book</a></td></tr></tbody></table><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>给图片加链接的本质是混合图片显示语法和普通的链接语法。普通的链接中[ ]内部是链接要显示的文本，而图片链接[ ]里面则是要显示的图片。<br>直接混合两种语法当然可以，但是十分啰嗦，为此我们可以使用URL标识符的形式。</p><table><thead><tr><th>#</th><th>语法</th><th align="center">效果</th></tr></thead><tbody><tr><td>1</td><td><code>[![weibo-logo]](http://weibo.com/linpiaochen)</code></td><td align="center"><a href="http://weibo.com/linpiaochen"><img src="/img/weibo.png" alt="weibo-logo" title="点击图片进入我的微博"></a></td></tr><tr><td>2</td><td><code>[![](/img/zhihu.png &quot;我的知乎，欢迎关注&quot;)][zhihu]</code></td><td align="center"><a href="https://www.zhihu.com/people/jellywong" title="我的知乎，欢迎关注"><img src="/img/zhihu.png" title="我的知乎，欢迎关注"></a></td></tr><tr><td>3</td><td><code>[![csdn-logo]][csdn]</code></td><td align="center"><a href="http://blog.csdn.net/guodongxiaren" title="我的博客"><img src="/img/csdn.png" alt="csdn-logo" title="我的CSDN博客"></a></td></tr></tbody></table><p>因为图片本身和链接本身都支持URL标识符的形式，所以图片链接也可以很简洁（见例3）。<br>注意，此时鼠标悬停时显示的文字是图片的title，而非链接本身的title了。</p><blockquote><p>本文URL标识符都放置于文末</p></blockquote><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p>其实呢，每一个标题都是一个锚点，和HTML的锚点（<code>#</code>）类似，比如我们 </p><table><thead><tr><th>语法</th><th>效果</th></tr></thead><tbody><tr><td><code>[回到顶部](#readme)</code></td><td><a href="#readme">回到顶部</a></td></tr></tbody></table><p>不过要注意，标题中的英文字母都被转化为<strong>小写字母</strong>了。</p><blockquote><p>以前GitHub对中文支持的不好，所以中文标题不能正确识别为锚点，但是现在已经没问题啦！</p></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>昵称：果冻虾仁</li></ul><ul><li>别名：隔壁老王</li></ul><ul><li>英文名：Jelly</li></ul><h3 id="多级无序列表"><a href="#多级无序列表" class="headerlink" title="多级无序列表"></a>多级无序列表</h3><ul><li>编程语言<ul><li>脚本语言<ul><li>Python</li></ul></li></ul></li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><h4 id="一般效果"><a href="#一般效果" class="headerlink" title="一般效果"></a>一般效果</h4><p>就是在数字后面加一个点，再加一个空格。不过看起来起来可能不够明显。<br>面向对象的三个基本特征：</p><ol><li>封装</li><li>继承</li><li>多态</li></ol><h4 id="多级有序列表"><a href="#多级有序列表" class="headerlink" title="多级有序列表"></a>多级有序列表</h4><p>和无序列表一样，有序列表也有多级结构：  </p><ol><li>这是一级的有序列表，数字1还是1<ol><li>这是二级的有序列表，阿拉伯数字在显示的时候变成了罗马数字<ol><li>这是三级的有序列表，数字在显示的时候变成了英文字母</li></ol></li></ol></li></ol><h3 id="复选框列表"><a href="#复选框列表" class="headerlink" title="复选框列表"></a>复选框列表</h3><ul><li><input checked="" disabled="" type="checkbox"> 需求分析</li><li><input checked="" disabled="" type="checkbox"> 系统设计</li><li><input checked="" disabled="" type="checkbox"> 详细设计</li><li><input disabled="" type="checkbox"> 编码</li><li><input disabled="" type="checkbox"> 测试</li><li><input disabled="" type="checkbox"> 交付</li></ul><p>您可以使用这个功能来标注某个项目各项任务的完成情况。</p><blockquote><p>Tip:</p><blockquote><p>在GitHub的<strong>issue</strong>中使用该语法是可以实时点击复选框来勾选或解除勾选的，而无需修改issue原文。</p></blockquote></blockquote><h2 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h2><h3 id="常用于引用文本"><a href="#常用于引用文本" class="headerlink" title="常用于引用文本"></a>常用于引用文本</h3><h4 id="文本摘自《深入理解计算机系统》P27"><a href="#文本摘自《深入理解计算机系统》P27" class="headerlink" title="文本摘自《深入理解计算机系统》P27"></a>文本摘自《深入理解计算机系统》P27</h4><p>　令人吃惊的是，在哪种字节顺序是合适的这个问题上，人们表现得非常情绪化。实际上术语“little endian”（小端）和“big endian”（大端）出自Jonathan Swift的《格利佛游记》一书，其中交战的两个派别无法就应该从哪一端打开一个半熟的鸡蛋达成一致。因此，争论沦为关于社会政治的争论。只要选择了一种规则并且始终如一的坚持，其实对于哪种字节排序的选择都是任意的。</p><blockquote><p><strong>“端”（endian）的起源</strong><br>以下是Jonathan Swift在1726年关于大小端之争历史的描述：<br>“……下面我要告诉你的是，Lilliput和Blefuscu这两大强国在过去36个月里一直在苦战。战争开始是由于以下的原因：我们大家都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端，可是当今的皇帝的祖父小时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝，就下了一道敕令，命令全体臣民吃鸡蛋时打破较小的一端，违令者重罚。”</p></blockquote><h3 id="块引用有多级结构"><a href="#块引用有多级结构" class="headerlink" title="块引用有多级结构"></a>块引用有多级结构</h3><blockquote><p>数据结构</p><blockquote><p>树</p><blockquote><p>二叉树</p><blockquote><p>平衡二叉树</p><blockquote><p>满二叉树</p></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>在三个反引号后面加上编程语言的名字，另起一行开始写代码，最后一行再加上三个反引号。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;&#125; <span class="comment">//Java</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> <span class="comment">//C</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello GitHub&quot;</span> <span class="comment">#Bash</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myH1&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;Welcome to my Homepage&quot;</span>; <span class="comment">//javascipt</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string &amp;<span class="keyword">operator</span>+(<span class="type">const</span> string&amp; A,<span class="type">const</span> string&amp; B) <span class="comment">//cpp</span></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><hr><table><thead><tr><th>表头1</th><th>表头2</th></tr></thead><tbody><tr><td>表格单元</td><td>表格单元</td></tr><tr><td>表格单元</td><td>表格单元</td></tr></tbody></table><table><thead><tr><th>表头1</th><th>表头2</th></tr></thead><tbody><tr><td>表格单元</td><td>表格单元</td></tr><tr><td>表格单元</td><td>表格单元</td></tr></tbody></table><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>表格可以指定对齐方式</p><table><thead><tr><th align="left">左对齐</th><th align="center">居中</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">col 3 is</td><td align="center">some wordy text</td><td align="right">$1600</td></tr><tr><td align="left">col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td align="left">zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><h3 id="混合其他语法"><a href="#混合其他语法" class="headerlink" title="混合其他语法"></a>混合其他语法</h3><p>表格单元中的内容可以和其他大多数GFM语法配合使用，如：  </p><h4 id="使用普通文本的删除线，斜体等效果"><a href="#使用普通文本的删除线，斜体等效果" class="headerlink" title="使用普通文本的删除线，斜体等效果"></a>使用普通文本的删除线，斜体等效果</h4><table><thead><tr><th>名字</th><th>描述</th></tr></thead><tbody><tr><td>Help</td><td><del>Display the</del> help window.</td></tr><tr><td>Close</td><td><em>Closes</em> a window</td></tr></tbody></table><h4 id="表格中嵌入图片（链接）"><a href="#表格中嵌入图片（链接）" class="headerlink" title="表格中嵌入图片（链接）"></a>表格中嵌入图片（链接）</h4><p>其实前面介绍图片显示、图片链接的时候为了清晰就是放在在表格中显示的。</p><table><thead><tr><th>图片</th><th>描述</th></tr></thead><tbody><tr><td><img src="http://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度logo"></td><td>百度</td></tr></tbody></table><h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><hr><p>Github的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。</p><p>比如<code>:blush:</code>，可以显示:blush:。</p><p>具体每一个表情的符号码，可以查询GitHub的官方网页<a href="http://www.emoji-cheat-sheet.com/">http://www.emoji-cheat-sheet.com</a>。</p><p>但是这个网页每次都打开<strong>奇慢</strong>。。所以我整理到了本repo中，大家可以直接在此查看<a href="./emoji.md">emoji</a>。</p><h2 id="diff语法"><a href="#diff语法" class="headerlink" title="diff语法"></a>diff语法</h2><hr><p>版本控制的系统中都少不了diff的功能，即展示一个文件内容的增加与删除。<br>GFM中可以显示的展示diff效果。使用绿色表示新增，红色表示删除。</p><p>其语法与代码高亮类似，只是在三个反引号后面写diff，<br>并且其内容中，以 <code>+ </code>开头表示新增，<code>- </code>开头表示删除。</p><p>效果如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ 鸟宿池边树，僧敲月下门</span></span><br><span class="line"><span class="deletion">- 鸟宿池边树，僧推月下门</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
